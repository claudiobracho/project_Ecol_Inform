# In this section of code we load all necessary packages for
# further scripts
# We take advantage of the renv package, which guarantees
# reproducibility by restoring project's dependencies from a
# lockfile. The same file allows to check for package versions
# We encourage to use the original R version (1.1.1) of the code
# to avoid incompatibilities
# Renv - environment lock
# install renv if required
#install.packages("renv")
library("renv")
# Restore project library from lockfile
renv::restore()
# If the renv:restore function fails, try to install
# packages if required
#renv::hydrate(pack)
#renv::install(pack)
# If previous options fail, try to load required packages
# in each code (remember to use the version reported in the
# renv.lock file to guarantee reproducibility)
# Store packages
pack <- c("tidyverse", "rgdal","sf","sp","rnaturalearth",
"rnaturalearthdata", "raster", "maptools",
"gdalUtilities", "tidyr", "ggspatial", "purrr",
"ggpubr", "readxl", "dplyr", "ggplot2",
"lsmeans","stringr","multcomp",
"glmmTMB", "ggrepel", "performance",
"emmeans", "effects", "DHARMa", "gridExtra",
"purrr", "ggeffects", "sjPlot", "sjmisc",
"Hmisc", "devtools", "xlsx", "ENMTools", "heatmaply",
"isocat", "terra", "Matrix", "corrplot",
"biomod2", "dismo", "rstudioapi","rgeos",
"RColorBrewer")
# Load packages
lapply(pack, library, character.only = TRUE)
# If you find issues with the loading of any package,
# try to load it individually. E.g.
library(heatmaply) # loaded individually to avoid potential issues
library(terra) # loaded individually to avoid potential issues
library(Matrix) # loaded individually to avoid potential issues
library(Hmisc)
library(readxl)
library(raster)
library(sf)
# Snapshot provided by renv to get the current version
# of loaded packages
renv::settings$snapshot.type("all")
renv::snapshot()
# In this section of code we compute spatial comparisons between
# those treatments implemented in our SDMs, which consist on
# the mean Pearson correlation, the Schoener’s D, the Hellinger’s I,
# and Spearman rank correlation
### 0. Load packages ---------------------------------------------------------------
# Only if renv fails
#pack <- c("tidyverse", "rgdal","sf","sp","rnaturalearth",
#          "rnaturalearthdata", "raster", "maptools", "Hmisc",
#          "gdalUtilities", "tidyr", "ggspatial", "purrr",
#          "ggpubr", "readxl", "devtools", "xlsx", "ENMTools",
#          "heatmaply", "isocat", "terra", "Matrix", "corrplot")
#lapply(pack, require, character.only = TRUE)
# Check working directory
getwd()
### 1. Load and prepare data ---------------------------------------------------------------
# Open the list of study species
spp_keys <- read_excel("data_inputs/spp_keys.xlsx")
# First, delete uncomplete species
spp_keys <- subset(spp_keys, ! plant_sp == "Sambucusnigr" &
! plant_sp == "Ilexaquifoli" &
! plant_sp == "Hederahelix" &
! plant_sp == "Cornussangui" &
! plant_sp == "Juniperuscom" &
! plant_sp == "Vacciniummyr" &
! plant_sp == "Morusnigra" &
! plant_sp == "Crataegusmon" &
! plant_sp == "Prunusspinos" &
! plant_sp == "Rosacanina" &
! plant_sp == "Solanumnigru" &
! plant_sp == "Taxusbaccata" &
! plant_sp == "Vitisvinifer")
# Loop to get the value of the CI metric per each treatment
# (12 treatment combinations per species)
comb <- c("1","2","3","4","5","6","7","8","9","10","11","12")
### 2. Get the mean Pearson correlation ---------------------------------------------------------------
# Open predictions for the first species
Rstack <-stack(list.files(path="C:/Users/claud/Downloads/Spatial_outputs/Arbutusunedo/",
pattern='tif',full.names=TRUE))
plot(Rstack)
# Calculate the pearson correlation for the first species
# Calculate the pearson correlation for the first species
Rstats <- layerStats(Rstack, "pearson", asSample=TRUE, na.rm=TRUE)
correlation.x <- Rstats$`pearson correlation coefficient`
# Run a for loop
for(j in 2:nrow(spp_keys)){
# Open predictions for further species
Rstack <-stack(list.files(path=paste0("C:/Users/claud/Downloads/Spatial_outputs/",
spp_keys[j,1],"/"),
pattern='tif',full.names=TRUE))
# Calculate the pearson correlation
Rstats <- layerStats(Rstack, "pearson", asSample=TRUE, na.rm=TRUE)
correlation_2 <- Rstats$`pearson correlation coefficient`
correlation.x <- (correlation.x + correlation_2)
}
# Obtain the mean pearson correlation
correlation_v2 <- correlation.x / 18 # Reminder: 18 = N of species
# Obtain the mean pearson correlation matrix and plot it
r <- cor(correlation_v2)
mtcars.rcorr <- rcorr(as.matrix(correlation_v2))
p <- mtcars.rcorr$P
heatmaply_cor(
r,
node_type = "scatter",
point_size_mat = -log10(p),
point_size_name = "-log10(p-value)",
label_names = c("x", "y", "Correlation"),
symm = FALSE,
col = viridis(n = 5),
# Only one dendrogram
dendrogram = "both"
)
heatmaply_cor(
r,
node_type = "scatter",
point_size_mat = -log10(p),
point_size_name = "-log10(p-value)",
label_names = c("x", "y", "Correlation"),
symm = FALSE,
col = viridis(n = 5),
# Only one dendrogram
dendrogram = "both"
)
View(r)
View(p)
install.packages("plotly")
library(plotly)
heatmaply_cor(
r,
node_type = "scatter",
point_size_mat = -log10(p),
point_size_name = "-log10(p-value)",
label_names = c("x", "y", "Correlation"),
symm = FALSE,
col = viridis(n = 5),
# Only one dendrogram
dendrogram = "both"
)
heatmaply_cor(
r,
node_type = "scatter",
point_size_mat = -log10(p)
)
# If you find issues with the loading of any package,
# try to load it individually. E.g.
library(heatmaply) # loaded individually to avoid potential issues
library(terra) # loaded individually to avoid potential issues
library(Matrix) # loaded individually to avoid potential issues
library(Hmisc)
library(readxl)
library(raster)
library(sf)
heatmaply_cor(
r,
node_type = "scatter",
point_size_mat = -log10(p),
point_size_name = "-log10(p-value)",
label_names = c("x", "y", "Correlation"),
symm = FALSE,
col = viridis(n = 5),
# Only one dendrogram
dendrogram = "both"
)
install.packages("heatmaply")
# If you find issues with the loading of any package,
# try to load it individually. E.g.
library(heatmaply) # loaded individually to avoid potential issues
library(terra) # loaded individually to avoid potential issues
library(Matrix) # loaded individually to avoid potential issues
library(Hmisc)
library(readxl)
library(raster)
library(sf)
heatmaply_cor(
r,
node_type = "scatter",
point_size_mat = -log10(p),
point_size_name = "-log10(p-value)",
label_names = c("x", "y", "Correlation"),
symm = FALSE,
col = viridis(n = 5),
# Only one dendrogram
dendrogram = "both"
)
library(plotly)
heatmaply_cor(
r,
node_type = "scatter",
point_size_mat = -log10(p),
point_size_name = "-log10(p-value)",
label_names = c("x", "y", "Correlation"),
symm = FALSE,
col = viridis(n = 5),
# Only one dendrogram
dendrogram = "both"
)
install.packages("plotly", version='4.10.4')
remove.packages("plotly")
install.packages("plotly", version='4.10.4')
remove.packages("plotly")
install.packages("plotly", version='4.10.4')
